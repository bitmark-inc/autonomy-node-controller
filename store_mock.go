// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// SetBinding mocks base method
func (m *MockStore) SetBinding(did, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBinding", did, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBinding indicates an expected call of SetBinding
func (mr *MockStoreMockRecorder) SetBinding(did, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBinding", reflect.TypeOf((*MockStore)(nil).SetBinding), did, nonce)
}

// BindingNonce mocks base method
func (m *MockStore) BindingNonce(did string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindingNonce", did)
	ret0, _ := ret[0].(string)
	return ret0
}

// BindingNonce indicates an expected call of BindingNonce
func (mr *MockStoreMockRecorder) BindingNonce(did interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindingNonce", reflect.TypeOf((*MockStore)(nil).BindingNonce), did)
}

// CompleteBinding mocks base method
func (m *MockStore) CompleteBinding(did string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteBinding", did)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteBinding indicates an expected call of CompleteBinding
func (mr *MockStoreMockRecorder) CompleteBinding(did interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteBinding", reflect.TypeOf((*MockStore)(nil).CompleteBinding), did)
}

// HasBinding mocks base method
func (m *MockStore) HasBinding(did string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBinding", did)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBinding indicates an expected call of HasBinding
func (mr *MockStoreMockRecorder) HasBinding(did interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBinding", reflect.TypeOf((*MockStore)(nil).HasBinding), did)
}

// UpdateMemberAccessMode mocks base method
func (m *MockStore) UpdateMemberAccessMode(memberDID string, accessMode AccessMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberAccessMode", memberDID, accessMode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberAccessMode indicates an expected call of UpdateMemberAccessMode
func (mr *MockStoreMockRecorder) UpdateMemberAccessMode(memberDID, accessMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberAccessMode", reflect.TypeOf((*MockStore)(nil).UpdateMemberAccessMode), memberDID, accessMode)
}

// RemoveMember mocks base method
func (m *MockStore) RemoveMember(memberDID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", memberDID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember
func (mr *MockStoreMockRecorder) RemoveMember(memberDID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockStore)(nil).RemoveMember), memberDID)
}

// MemberAccessMode mocks base method
func (m *MockStore) MemberAccessMode(memberDID string) AccessMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberAccessMode", memberDID)
	ret0, _ := ret[0].(AccessMode)
	return ret0
}

// MemberAccessMode indicates an expected call of MemberAccessMode
func (mr *MockStoreMockRecorder) MemberAccessMode(memberDID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberAccessMode", reflect.TypeOf((*MockStore)(nil).MemberAccessMode), memberDID)
}

// LoadRequestsUsage mocks base method
func (m *MockStore) LoadRequestsUsage() (*Usage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRequestsUsage")
	ret0, _ := ret[0].(*Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRequestsUsage indicates an expected call of LoadRequestsUsage
func (mr *MockStoreMockRecorder) LoadRequestsUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRequestsUsage", reflect.TypeOf((*MockStore)(nil).LoadRequestsUsage))
}

// SaveRequestsUsage mocks base method
func (m *MockStore) SaveRequestsUsage(arg0 *Usage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRequestsUsage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRequestsUsage indicates an expected call of SaveRequestsUsage
func (mr *MockStoreMockRecorder) SaveRequestsUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRequestsUsage", reflect.TypeOf((*MockStore)(nil).SaveRequestsUsage), arg0)
}
