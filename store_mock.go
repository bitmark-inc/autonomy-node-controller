// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AccessMode mocks base method.
func (m *MockStore) AccessMode(memberDID string) AccessMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessMode", memberDID)
	ret0, _ := ret[0].(AccessMode)
	return ret0
}

// AccessMode indicates an expected call of AccessMode.
func (mr *MockStoreMockRecorder) AccessMode(memberDID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessMode", reflect.TypeOf((*MockStore)(nil).AccessMode), memberDID)
}

// RemoveMember mocks base method.
func (m *MockStore) RemoveMember(memberDID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", memberDID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockStoreMockRecorder) RemoveMember(memberDID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockStore)(nil).RemoveMember), memberDID)
}

// UpdateMemberAccessMode mocks base method.
func (m *MockStore) UpdateMemberAccessMode(memberDID string, accessMode AccessMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberAccessMode", memberDID, accessMode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberAccessMode indicates an expected call of UpdateMemberAccessMode.
func (mr *MockStoreMockRecorder) UpdateMemberAccessMode(memberDID, accessMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberAccessMode", reflect.TypeOf((*MockStore)(nil).UpdateMemberAccessMode), memberDID, accessMode)
}
