// Code generated by MockGen. DO NOT EDIT.
// Source: bitcoin_rpc_client.go

// Package main is a generated GoMock package.
package main

import (
	json "encoding/json"
	reflect "reflect"

	btcjson "github.com/btcsuite/btcd/btcjson"
	rpcclient "github.com/btcsuite/btcd/rpcclient"
	gomock "github.com/golang/mock/gomock"
)

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// GetBlockChainInfo mocks base method.
func (m *MockRPCClient) GetBlockChainInfo() (*btcjson.GetBlockChainInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockChainInfo")
	ret0, _ := ret[0].(*btcjson.GetBlockChainInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockChainInfo indicates an expected call of GetBlockChainInfo.
func (mr *MockRPCClientMockRecorder) GetBlockChainInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockChainInfo", reflect.TypeOf((*MockRPCClient)(nil).GetBlockChainInfo))
}

// GetDescriptorInfo mocks base method.
func (m *MockRPCClient) GetDescriptorInfo(descriptor string) (*btcjson.GetDescriptorInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescriptorInfo", descriptor)
	ret0, _ := ret[0].(*btcjson.GetDescriptorInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDescriptorInfo indicates an expected call of GetDescriptorInfo.
func (mr *MockRPCClientMockRecorder) GetDescriptorInfo(descriptor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescriptorInfo", reflect.TypeOf((*MockRPCClient)(nil).GetDescriptorInfo), descriptor)
}

// GetWalletInfo mocks base method.
func (m *MockRPCClient) GetWalletInfo() (*btcjson.GetWalletInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletInfo")
	ret0, _ := ret[0].(*btcjson.GetWalletInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletInfo indicates an expected call of GetWalletInfo.
func (mr *MockRPCClientMockRecorder) GetWalletInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletInfo", reflect.TypeOf((*MockRPCClient)(nil).GetWalletInfo))
}

// RawRequest mocks base method.
func (m *MockRPCClient) RawRequest(method string, params []json.RawMessage) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawRequest", method, params)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawRequest indicates an expected call of RawRequest.
func (mr *MockRPCClientMockRecorder) RawRequest(method, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawRequest", reflect.TypeOf((*MockRPCClient)(nil).RawRequest), method, params)
}

// Shutdown mocks base method.
func (m *MockRPCClient) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRPCClientMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRPCClient)(nil).Shutdown))
}

// WalletProcessPsbt mocks base method.
func (m *MockRPCClient) WalletProcessPsbt(psbt string, sign *bool, sighashType rpcclient.SigHashType, bip32Derivs *bool) (*btcjson.WalletProcessPsbtResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletProcessPsbt", psbt, sign, sighashType, bip32Derivs)
	ret0, _ := ret[0].(*btcjson.WalletProcessPsbtResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletProcessPsbt indicates an expected call of WalletProcessPsbt.
func (mr *MockRPCClientMockRecorder) WalletProcessPsbt(psbt, sign, sighashType, bip32Derivs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletProcessPsbt", reflect.TypeOf((*MockRPCClient)(nil).WalletProcessPsbt), psbt, sign, sighashType, bip32Derivs)
}
